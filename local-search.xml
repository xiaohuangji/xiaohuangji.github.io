<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>10.16练习</title>
    <link href="/2024/10/17/10-16%E7%BB%83%E4%B9%A0/10-16%E7%BB%83%E4%B9%A0/"/>
    <url>/2024/10/17/10-16%E7%BB%83%E4%B9%A0/10-16%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Edu170-D-D-Attribute-Checks"><a href="#Edu170-D-D-Attribute-Checks" class="headerlink" title="Edu170 D-D - Attribute Checks"></a>Edu170 D-<a href="https://codeforces.com/contest/2025/problem/D">D - Attribute Checks</a></h1><p>观察： m 和 r[i] 都很小，所以考虑用这些量来设计状态进行DP。</p><p>一、状态设计：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">dp[i][j][k] <span class="hljs-comment">//前i个0，j个给力量，当前这点为k，k＝0:当前给力量，k＝1:当前智力。</span><br></code></pre></td></tr></table></figure><p>二、初始化：无所谓，0就行了</p><p>三、状态转移：</p><p>遍历n，维护大于0的各个r[i]的数量w1[i]，以及小于0的各个r[i]的数量w2[i]，同时进行dp</p><p>1、当遇到非0数的时候，就把相应的w减一，因为当后面取0增加能力时，这些数不会产生贡献了.</p><p>2、当遇到0时，进行状态转移，方程为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= cnt; ++j)<br><span class="hljs-keyword">if</span>(j &gt; <span class="hljs-number">0</span>)<br>dp[cnt][j][<span class="hljs-number">0</span>] = <span class="hljs-built_in">max</span>(dp[cnt - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>], dp[cnt - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>]) + pre1[j] - pre1[j - <span class="hljs-number">1</span>]; <br><span class="hljs-comment">//当前这位选0，有j个力量，当然就是从前面选j-1个力量的状态转移过来;</span><br><span class="hljs-comment">//有了j个力量，那么此时小于j的所有数都会产生贡献，但是因为小于j-1的数的贡献在前面已经算过一次，所以要减去。</span><br>    <span class="hljs-keyword">if</span>(j &lt; cnt)<br>         dp[cnt][j][<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(dp[cnt - <span class="hljs-number">1</span>][j][<span class="hljs-number">0</span>], dp[cnt - <span class="hljs-number">1</span>][j][<span class="hljs-number">1</span>]) + pre2[(cnt - j)] - pre2[(cnt - j) - <span class="hljs-number">1</span>];<br>         <span class="hljs-comment">//同上,但此时是从选j个力量转移过来，因为当前选的是智力</span><br></code></pre></td></tr></table></figure><p>3、更新答案：easy</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ans = <span class="hljs-built_in">max</span>(dp[i][j][k]);<br></code></pre></td></tr></table></figure><p>四、AC代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> double long double </span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5005</span>;<br><span class="hljs-type">int</span> dp[N][N][<span class="hljs-number">2</span>]; <span class="hljs-comment">//前i个0,j个给力量，当前选力量(0)/智力(1)所能达到的最大值。</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br><br>    <span class="hljs-comment">//m很小</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">w1</span><span class="hljs-params">(N + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">w2</span><span class="hljs-params">(N + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>        cin&gt;&gt;a[i];<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; N; ++j)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">2</span>; ++k)&#123;<br>                dp[i][j][k] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>        <span class="hljs-keyword">if</span>(a[i] &lt; <span class="hljs-number">0</span>)&#123;<br>            w1[-a[i]] ++;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i] &gt; <span class="hljs-number">0</span>)&#123;<br>            w2[a[i]] ++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>        <span class="hljs-keyword">if</span>(a[i] &lt; <span class="hljs-number">0</span>)&#123;<br>            w1[-a[i]]  --;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i] &gt; <span class="hljs-number">0</span>)&#123;<br>            w2[a[i]] --;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            cnt ++;<br>            <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">pre1</span><span class="hljs-params">(N + <span class="hljs-number">1</span>)</span></span>;<br>            <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">pre2</span><span class="hljs-params">(N + <span class="hljs-number">1</span>)</span></span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; N; ++j)&#123;<br>                pre1[j] = pre1[j - <span class="hljs-number">1</span>] + w1[j];<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; N; ++j)&#123;<br>                pre2[j] = pre2[j - <span class="hljs-number">1</span>] + w2[j];<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= cnt; ++j)&#123;<br>                <span class="hljs-keyword">if</span>(j &gt; <span class="hljs-number">0</span>)&#123;<br>                    dp[cnt][j][<span class="hljs-number">0</span>] = <span class="hljs-built_in">max</span>(dp[cnt - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>], dp[cnt - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>]) + pre1[j] - pre1[j - <span class="hljs-number">1</span>]; <br>                &#125;<br>                <span class="hljs-keyword">if</span>(j &lt; cnt)&#123;<br>                    dp[cnt][j][<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(dp[cnt - <span class="hljs-number">1</span>][j][<span class="hljs-number">0</span>], dp[cnt - <span class="hljs-number">1</span>][j][<span class="hljs-number">1</span>]) + pre2[(cnt - j)] - pre2[(cnt - j) - <span class="hljs-number">1</span>];<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; N; ++j)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">2</span>; ++k)&#123;<br>                ans = <span class="hljs-built_in">max</span>(ans, dp[i][j][k]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ans&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>); <br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;  <br>    <span class="hljs-comment">//cin&gt;&gt;t;</span><br>    <span class="hljs-keyword">while</span> (t--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>五、优化：</p><p>注意到只用从前一位转移过来，而且第三维实际上是没用的，所以第一维可以用滚动数组，第三维可以直接删掉。此时要注意更新顺序；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> double long double </span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5005</span>;<br><span class="hljs-type">int</span> dp[N]; <span class="hljs-comment">//压维</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br><br>    <span class="hljs-comment">//m很小</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">w1</span><span class="hljs-params">(N + <span class="hljs-number">1</span>)</span></span>;<span class="hljs-comment">//维护r[i]</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">w2</span><span class="hljs-params">(N + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">pre1</span><span class="hljs-params">(N + <span class="hljs-number">1</span>)</span></span>;<span class="hljs-comment">//前缀和</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">pre2</span><span class="hljs-params">(N + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>        cin&gt;&gt;a[i];<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; N; ++j)&#123;<span class="hljs-comment">//初始化</span><br>        dp[j] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>        <span class="hljs-keyword">if</span>(a[i] &lt; <span class="hljs-number">0</span>)&#123;<br>            w1[-a[i]] ++;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i] &gt; <span class="hljs-number">0</span>)&#123;<br>            w2[a[i]] ++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>        <span class="hljs-keyword">if</span>(a[i] &lt; <span class="hljs-number">0</span>)&#123;<br>            w1[-a[i]] --;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i] &gt; <span class="hljs-number">0</span>)&#123;<br>            w2[a[i]] --;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            cnt ++;<span class="hljs-comment">//记录第几个0</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; N; ++j)&#123;<br>                pre1[j] = pre1[j - <span class="hljs-number">1</span>] + w1[j];<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; N; ++j)&#123;<br>                pre2[j] = pre2[j - <span class="hljs-number">1</span>] + w2[j];<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = cnt; j &gt;= <span class="hljs-number">0</span>; --j)&#123;<br>                <span class="hljs-keyword">if</span>(j &lt; cnt)&#123;<span class="hljs-comment">//顺序跟上面的代码不同了</span><br>                    dp[j] = <span class="hljs-built_in">max</span>(dp[j],dp[j] + pre2[(cnt - j)] - pre2[(cnt - j) - <span class="hljs-number">1</span>]);<br>                &#125;<br>                <span class="hljs-keyword">if</span>(j &gt; <span class="hljs-number">0</span>)&#123;<br>                    dp[j] = <span class="hljs-built_in">max</span>(dp[j], dp[j - <span class="hljs-number">1</span>] + pre1[j] - pre1[j - <span class="hljs-number">1</span>]);<br>                &#125; <br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; N; ++j)&#123;<br>        ans = <span class="hljs-built_in">max</span>(ans, dp[j]);     <br>    &#125;<br>    cout&lt;&lt;ans&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>); <br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;  <br>    <span class="hljs-comment">//cin&gt;&gt;t;</span><br>    <span class="hljs-keyword">while</span> (t--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="codeforces-round-975-B-Speedbreaker-1900"><a href="#codeforces-round-975-B-Speedbreaker-1900" class="headerlink" title="codeforces round 975 B - Speedbreaker  1900"></a>codeforces round 975 <a href="https://codeforces.com/contest/2018/problem/B">B - Speedbreaker </a> 1900</h1><p>观察1：如果有1，那么必然要从1开始走，如果有两个1，那么N；如果有2，那么两个2必须挨在一起，如果有3，那么两个3之间最多间隔一个数……，</p><p>结论1.1：对于各个数，他有一个最大的范围，就是这个数本身。</p><p>Q1:范围应该如何计算？在计算2的范围时，如果左边有一个2，右边有一个1呢？显然此时应该计算的范围是这个1到2的。</p><p>结论1.2：对某个数x的范围计算，应该找&lt;&#x3D;x的最左边的数的位置作为 l, &lt;&#x3D; x的最右边的位置作为r，范围是r - l + 1, 范围的限制仍为x。</p><p>观察2：若想要到达某个点 i ，这个点上的数为 x，那么最左起点应为：i - x + 1, 最右起点应为：i + x - 1，这是显然的。</p><p>结论2：若满足结论1，即必定有解，那么答案就是各个点起点区间的交集中的点数，此时交集内的各个点都满足作为各个点的起点的要求。</p><p>过程：</p><p>1、先判断是否有解</p><p>2、求出交集</p><p>AC代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> double long double </span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">L</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, n)</span></span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">R</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123; <span class="hljs-comment">//枚举数x，找到其最远边界</span><br>        cin&gt;&gt;a[i];<br>        L[a[i]] = <span class="hljs-built_in">min</span>(L[a[i]], i);<br>        R[a[i]] = <span class="hljs-built_in">max</span>(R[a[i]], i);<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123; <span class="hljs-comment">//x的最大边界的l和r要与x-1的分别取min和max</span><br>        L[i] = <span class="hljs-built_in">min</span>(L[i - <span class="hljs-number">1</span>], L[i]);<br>        R[i] = <span class="hljs-built_in">max</span>(R[i - <span class="hljs-number">1</span>], R[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<span class="hljs-comment">//不满足条件，无解</span><br>        <span class="hljs-keyword">if</span>(R[i] - L[i] + <span class="hljs-number">1</span> &gt; i)&#123;<br>            cout&lt;&lt;<span class="hljs-number">0</span>&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>            <span class="hljs-keyword">return</span> ;<br>        &#125; <br>    &#125;<br>  <br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r = n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<span class="hljs-comment">//有解，找交集。</span><br>        l = <span class="hljs-built_in">max</span>(l, i - (a[i] - <span class="hljs-number">1</span>));<br>        r = <span class="hljs-built_in">min</span>(r, i + (a[i] - <span class="hljs-number">1</span>));<br>    &#125;<br>    cout&lt;&lt;r - l + <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>); <br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;  <br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span> (t--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="codeforces-round-959-D-Funny-Game-1900"><a href="#codeforces-round-959-D-Funny-Game-1900" class="headerlink" title="codeforces round 959 D - Funny Game  1900"></a>codeforces round 959 <a href="https://codeforces.com/contest/1994/problem/D">D - Funny Game</a>  1900</h1><p>观察1：操作顺序没有影响，用过的点可以重复用；</p><p>观察2：数据范围很小，可以很暴力的做法</p><p>观察3：操作的x是从1到n-1，每操作一次，连通块的个数减一，一开始有n个连通块，最后合并到只剩一个。当操作第x-1次时，是将连通块从n个变为n-1个，操作第1次时，是将连通块从2个变成一个。</p><p>观察4：条件时 |a[u]−a[v]| 可以整除 x，可以转化为a[u]和a[v]的差值为x，再转化成a[u]和a[v]取模于x后相等。</p><p>思路，考虑鸽巢原理：操作第x次时，有x+1个连通块，将他们取模后，至少有一对数是相等的，所以必然有解。按照这个思路从后往前模拟就行了。</p><p>AC代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> double long double </span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DSU</span> &#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; f, siz;<br>    <br>    <span class="hljs-built_in">DSU</span>() &#123;&#125;<br>    <span class="hljs-built_in">DSU</span>(<span class="hljs-type">int</span> n) &#123;<br>        <span class="hljs-built_in">init</span>(n);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        f.<span class="hljs-built_in">resize</span>(n);<br>        std::<span class="hljs-built_in">iota</span>(f.<span class="hljs-built_in">begin</span>(), f.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br>        siz.<span class="hljs-built_in">assign</span>(n, <span class="hljs-number">1</span>);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (x != f[x]) &#123;<br>            x = f[x] = f[f[x]];<br>        &#125;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">same</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">find</span>(x) == <span class="hljs-built_in">find</span>(y);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>        x = <span class="hljs-built_in">find</span>(x);<br>        y = <span class="hljs-built_in">find</span>(y);<br>        <span class="hljs-keyword">if</span> (x == y) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        siz[x] += siz[y];<br>        f[y] = x;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">size</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> siz[<span class="hljs-built_in">find</span>(x)];<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>        cin&gt;&gt;a[i];<br>    &#125;<br>    <span class="hljs-function">DSU <span class="hljs-title">dsu</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    vector&lt;PII&gt; ans;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; --i)&#123;<br>        map&lt;<span class="hljs-type">int</span>, map&lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;&gt;&gt; ma;<br>        <span class="hljs-comment">//第一维存模后的数，第二位存当前连通块的祖先，第三维放有什么数</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j)&#123;<br>            <span class="hljs-type">int</span> x = a[j] % i; <br>            ma[x][dsu.<span class="hljs-built_in">find</span>(j)].<span class="hljs-built_in">push_back</span>(j);<br>        &#125;<br>        vector&lt;<span class="hljs-type">int</span>&gt; t;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> [x, y] : ma)&#123;<br>            <span class="hljs-keyword">if</span>(y.<span class="hljs-built_in">size</span>() &lt; <span class="hljs-number">2</span>)&#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> [fa, son] : y)&#123;<br>                    t.<span class="hljs-built_in">push_back</span>(son[<span class="hljs-number">0</span>]);<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        ans.<span class="hljs-built_in">push_back</span>(&#123;t[<span class="hljs-number">0</span>], t[<span class="hljs-number">1</span>]&#125;);<br>        dsu.<span class="hljs-built_in">merge</span>(t[<span class="hljs-number">0</span>], t[<span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-built_in">reverse</span>(ans.<span class="hljs-built_in">begin</span>(), ans.<span class="hljs-built_in">end</span>());<br>    cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> [u, v] : ans)&#123;<br>        cout&lt;&lt;u&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;v&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>); <br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;  <br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span> (t--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="codeforces-round-608-D-Portals-2100"><a href="#codeforces-round-608-D-Portals-2100" class="headerlink" title="codeforces round 608 D - Portals  2100"></a>codeforces round 608 <a href="https://codeforces.com/contest/1271/problem/D">D - Portals</a>  2100</h1><p>ps:这题是我不知道做什么题，去翻friends的过题记录，发现子丑做这题wa4了，就拿过来看了看(doge)</p><p>观察1：什么时候决定一个点是否放守卫是最优的？当然是越后越好。</p><p>结论1：每个点只用保留起点最靠后的一条入边就行了，如果没有入边，那么入边就是自己，此时，决定每个点放守卫的时刻也就确定了。</p><p>思路：到了某个点应该取的时候，是取还是不取呢？可以先取着，实在不行就把取得的最小的几个点放回去。再这是个很一眼的反悔贪心问题，用一个堆来模拟即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> double long double </span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n,m,k;<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">b</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">c</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>        cin&gt;&gt;a[i]&gt;&gt;b[i]&gt;&gt;c[i];<br>    &#125;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">adj</span>(n + <span class="hljs-number">1</span>);<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ind</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)&#123;<br>        <span class="hljs-type">int</span> u, v;<br>        cin&gt;&gt;u&gt;&gt;v;<br>        ind[v] = <span class="hljs-built_in">max</span>(ind[v], u);<span class="hljs-comment">//最远点</span><br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<span class="hljs-comment">//建图连边</span><br>        <span class="hljs-keyword">if</span>(ind[i] != <span class="hljs-number">-1</span>)&#123;<br>            adj[ind[i]].<span class="hljs-built_in">push_back</span>(i);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            adj[i].<span class="hljs-built_in">push_back</span>(i);<br>        &#125;<br>    &#125;<br><br>    priority_queue&lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;, greater&lt;<span class="hljs-type">int</span>&gt;&gt; pq;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>        <span class="hljs-keyword">if</span>(k &gt;= a[i])&#123;<span class="hljs-comment">//k大于a[i],可以直接过去</span><br>            k += b[i];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> v : adj[i])&#123;<br>                <span class="hljs-keyword">if</span>(k &gt; <span class="hljs-number">0</span>)&#123;<br>                    k --;<br>                    pq.<span class="hljs-built_in">push</span>(c[v]);<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!pq.<span class="hljs-built_in">empty</span>())&#123;<br>                    <span class="hljs-type">int</span> x = pq.<span class="hljs-built_in">top</span>();<br>                    <span class="hljs-keyword">if</span>(x &lt; c[v])&#123;<br>                        pq.<span class="hljs-built_in">pop</span>();<br>                        pq.<span class="hljs-built_in">push</span>(c[v]);<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>            vector&lt;<span class="hljs-type">int</span>&gt; t;<br>            <span class="hljs-keyword">while</span>(!pq.<span class="hljs-built_in">empty</span>())&#123;<br>                <span class="hljs-keyword">auto</span> x = pq.<span class="hljs-built_in">top</span>();<br>                sum += x;<br>                t.<span class="hljs-built_in">push_back</span>(x);<br>                pq.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x : t)&#123;<br>                pq.<span class="hljs-built_in">push</span>(x);<br>            &#125;<br>            dp[i] = sum;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//k小于a[i], 要先判断到不到得了，然后把堆中最小的几个丢掉重新放。</span><br>            <span class="hljs-type">int</span> dis = a[i] - k;<br>            <span class="hljs-keyword">if</span>(dis &gt; pq.<span class="hljs-built_in">size</span>())&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">while</span>(dis)&#123;<br>                <span class="hljs-keyword">auto</span> x = pq.<span class="hljs-built_in">top</span>();<br>                pq.<span class="hljs-built_in">pop</span>();<br>                k ++;<br>                dis --;<br>            &#125;<br>            k += b[i];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> v : adj[i])&#123;<br>                <span class="hljs-keyword">if</span>(k &gt; <span class="hljs-number">0</span>)&#123;<br>                    k --;<br>                    pq.<span class="hljs-built_in">push</span>(c[v]);<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!pq.<span class="hljs-built_in">empty</span>())&#123;<br>                    <span class="hljs-keyword">auto</span> x = pq.<span class="hljs-built_in">top</span>();<br>                    <span class="hljs-keyword">if</span>(x &lt; c[v])&#123;<br>                        pq.<span class="hljs-built_in">pop</span>();<br>                        pq.<span class="hljs-built_in">push</span>(c[v]);<br>                    &#125;<br>                &#125;<br>            &#125;<br>            vector&lt;<span class="hljs-type">int</span>&gt; t;<br>            <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(!pq.<span class="hljs-built_in">empty</span>())&#123;<br>                <span class="hljs-keyword">auto</span> x = pq.<span class="hljs-built_in">top</span>();<br>                sum += x;<br>                t.<span class="hljs-built_in">push_back</span>(x);<br>                pq.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            dp[i] = sum;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x : t)&#123;<br>                pq.<span class="hljs-built_in">push</span>(x);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(dp[n] == <span class="hljs-number">-1</span>)&#123;<br>        cout&lt;&lt;<span class="hljs-number">-1</span>&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    cout&lt;&lt;dp[n]&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>); <br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;  <br>    <span class="hljs-comment">//cin&gt;&gt;t;</span><br>    <span class="hljs-keyword">while</span> (t--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/10/17/10-16%E7%BB%83%E4%B9%A0/10-16%E7%BB%83%E4%B9%A0/1.jpg" title="huihui">.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SegmentTree</title>
    <link href="/2024/10/14/SegmentTree/SegmentTree/"/>
    <url>/2024/10/14/SegmentTree/SegmentTree/</url>
    
    <content type="html"><![CDATA[<h2 id="扫描线："><a href="#扫描线：" class="headerlink" title="扫描线："></a>扫描线：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> double long double</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">line</span>&#123;<br>    <span class="hljs-type">int</span> x1, x2, h, tag;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(line &amp;t)&#123;<span class="hljs-keyword">return</span> h &lt; t.h;&#125;<br>&#125;L[N];<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">data</span>&#123;<br>    <span class="hljs-type">int</span> l, r, cnt, len;<br>    <span class="hljs-comment">//l,r:左右边界，cnt:被覆盖次数, len:被覆盖长度(x轴上的)</span><br>&#125;tr[N * <span class="hljs-number">8</span>];<br><br><span class="hljs-type">int</span> X[N];<span class="hljs-comment">//存X轴上的线段信息</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pull</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span>&#123; <br>    <span class="hljs-type">int</span> l = tr[p].l, r = tr[p].r;<br>    <span class="hljs-keyword">if</span>(tr[p].cnt)&#123;<br>        tr[p].len = X[r + <span class="hljs-number">1</span>] - X[l];<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        tr[p].len = tr[p &lt;&lt; <span class="hljs-number">1</span>].len + tr[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].len;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span>&#123;<br>    tr[p] = &#123;l, r, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">if</span>(l == r)&#123;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rangeApply</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l &gt; tr[p].r || r &lt; tr[p].l)&#123;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r)&#123;  <br>        tr[p].cnt += x;<br>        <span class="hljs-built_in">pull</span>(p);<span class="hljs-comment">//当前节点更新完后，先把本节点信息更新</span><br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-built_in">rangeApply</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r, x);<br>    <span class="hljs-built_in">rangeApply</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r, x);<br>    <span class="hljs-built_in">pull</span>(p);<span class="hljs-comment">//从子节点更新信息</span><br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>        <span class="hljs-type">int</span> x1, y1, x2, y2;<br>        cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;<br>        L[i] = &#123;x1, x2, y1, <span class="hljs-number">1</span>&#125;;<span class="hljs-comment">// 入边</span><br>        L[i + n] = &#123;x1, x2, y2, <span class="hljs-number">-1</span>&#125;; <span class="hljs-comment">//出边</span><br>        X[i] = x1; X[i + n] = x2;<span class="hljs-comment">//x坐标，后续用于对x进行离散化</span><br>    &#125;<br>    n *= <span class="hljs-number">2</span>; <span class="hljs-comment">//遍历所有入边和出边</span><br>    <span class="hljs-built_in">sort</span>(L + <span class="hljs-number">1</span>, L + n + <span class="hljs-number">1</span>);<span class="hljs-comment">//扫描线排序</span><br>    <span class="hljs-built_in">sort</span>(X + <span class="hljs-number">1</span>, X + n + <span class="hljs-number">1</span>);<span class="hljs-comment">//X坐标排序</span><br>    <span class="hljs-type">int</span> s = <span class="hljs-built_in">unique</span>(X + <span class="hljs-number">1</span>, X + n + <span class="hljs-number">1</span>) - (X + <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, s - <span class="hljs-number">1</span>);<span class="hljs-comment">//线段树存的是左端点代表的区间，从[1, 2] 到 [s - 1, s]，所以只用s - 1;</span><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i)&#123;<br>        <span class="hljs-type">int</span> l = <span class="hljs-built_in">lower_bound</span>(X + <span class="hljs-number">1</span>, X + s + <span class="hljs-number">1</span>, L[i].x1) - X;<br>        <span class="hljs-type">int</span> r = <span class="hljs-built_in">lower_bound</span>(X + <span class="hljs-number">1</span>, X + s + <span class="hljs-number">1</span>, L[i].x2) - X;<br>        <span class="hljs-built_in">rangeApply</span>(<span class="hljs-number">1</span>, l, r - <span class="hljs-number">1</span>, L[i].tag);<br>        ans += tr[<span class="hljs-number">1</span>].len * (L[i + <span class="hljs-number">1</span>].h - L[i].h);<br>    &#125;<br>    cout&lt;&lt;ans&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br><br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>); <br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//cin&gt;&gt;t;</span><br><br>    <span class="hljs-keyword">while</span> (t--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//cout&lt;&lt;fixed &lt;&lt;setprecision(12) &lt;&lt; (double)clock() / (double)CLOCKS_PER_SEC &lt;&lt; &quot;\n&quot;;</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Yellow_Chick-Weekly_contest1题解</title>
    <link href="/2024/10/13/Yellow-Chick-Weekly-contest1%E9%A2%98%E8%A7%A3/Yellow-Chick-Weekly-contest1%E9%A2%98%E8%A7%A3/"/>
    <url>/2024/10/13/Yellow-Chick-Weekly-contest1%E9%A2%98%E8%A7%A3/Yellow-Chick-Weekly-contest1%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Yellow-Chick-Weekly-contest1题解"><a href="#Yellow-Chick-Weekly-contest1题解" class="headerlink" title="Yellow _Chick -Weekly_contest1题解"></a>Yellow _Chick -Weekly_contest1题解</h1><h1 id="A："><a href="#A：" class="headerlink" title="A："></a>A：</h1><p>语法题，输入两个数，输出a + b</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> double long double </span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> a,b;<br>    cin&gt;&gt;a&gt;&gt;b;<br>    cout&lt;&lt;a + b&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>); <br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//cin&gt;&gt;t;</span><br>    <span class="hljs-keyword">while</span> (t--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-comment">//cout&lt;&lt;fixed &lt;&lt;setprecision(12) &lt;&lt; (double)clock() / (double)CLOCKS_PER_SEC &lt;&lt; &quot;\n&quot;;</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="B"><a href="#B" class="headerlink" title="B:"></a>B:</h1><p>语法题，按照题意输出五行即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> double long double </span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;  *  &quot;</span>&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    cout&lt;&lt;<span class="hljs-string">&quot; *** &quot;</span>&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    cout&lt;&lt;<span class="hljs-string">&quot;*****&quot;</span>&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    cout&lt;&lt;<span class="hljs-string">&quot; *** &quot;</span>&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    cout&lt;&lt;<span class="hljs-string">&quot;  *  &quot;</span>&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>); <br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//cin&gt;&gt;t;</span><br>    <span class="hljs-keyword">while</span> (t--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-comment">//cout&lt;&lt;fixed &lt;&lt;setprecision(12) &lt;&lt; (double)clock() / (double)CLOCKS_PER_SEC &lt;&lt; &quot;\n&quot;;</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="C"><a href="#C" class="headerlink" title="C:"></a>C:</h1><p>考察Ascll码，小写跟大写单词的字符相差32，不会Ascll也可以用if或switch来实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> double long double </span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">char</span> c;<br>    cin&gt;&gt;c;<br>    cout&lt;&lt;(<span class="hljs-type">char</span>)(c - <span class="hljs-number">32</span>)&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>); <br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//cin&gt;&gt;t;</span><br>    <span class="hljs-keyword">while</span> (t--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-comment">//cout&lt;&lt;fixed &lt;&lt;setprecision(12) &lt;&lt; (double)clock() / (double)CLOCKS_PER_SEC &lt;&lt; &quot;\n&quot;;</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="D"><a href="#D" class="headerlink" title="D:"></a>D:</h1><p>小小数学题，注意答案不能小于0，且不能÷0，当 t&#x3D;&#x3D;0 时要特判</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> double long double </span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> m,t,s;<br>    cin&gt;&gt;m&gt;&gt;t&gt;&gt;s;<br>    <span class="hljs-keyword">if</span>(t == <span class="hljs-number">0</span>)&#123;<br>        cout&lt;&lt;<span class="hljs-number">0</span>&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-built_in">max</span>(<span class="hljs-number">0ll</span>, m - ((s + t - <span class="hljs-number">1</span>) / t));<br>    cout&lt;&lt;ans&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>); <br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//cin&gt;&gt;t;</span><br>    <span class="hljs-keyword">while</span> (t--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-comment">//cout&lt;&lt;fixed &lt;&lt;setprecision(12) &lt;&lt; (double)clock() / (double)CLOCKS_PER_SEC &lt;&lt; &quot;\n&quot;;</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="E"><a href="#E" class="headerlink" title="E:"></a>E:</h1><p>考察浮点数，简单题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> double long double </span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">double</span> m,h;<br>    cin&gt;&gt;m&gt;&gt;h;<br>    <span class="hljs-type">double</span> k = m / (h * h);<br><br>    <span class="hljs-keyword">if</span>(k &lt; <span class="hljs-number">18.5</span>)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Underweight&quot;</span>&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(k &lt; <span class="hljs-number">24</span>)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Normal&quot;</span>&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        cout&lt;&lt;k&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Overweight&quot;</span>&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>); <br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//cin&gt;&gt;t;</span><br>    <span class="hljs-keyword">while</span> (t--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-comment">//cout&lt;&lt;fixed &lt;&lt;setprecision(12) &lt;&lt; (double)clock() / (double)CLOCKS_PER_SEC &lt;&lt; &quot;\n&quot;;</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="F"><a href="#F" class="headerlink" title="F:"></a>F:</h1><p>判断质数，对新手可能有点难。思路是枚举因数，再试除法判断两个因数是否为质数。ps：其实枚举因数的时候也不用枚举到n，枚举到 n &#x2F; i 就行了，自己想想为什么。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> double long double </span><br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isprimes</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(x == <span class="hljs-number">1</span>)&#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>     &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; x / i; ++i)&#123;<br>        <span class="hljs-keyword">if</span>(x % i == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n / i; ++i)&#123;<br>        <span class="hljs-keyword">if</span>(n % i == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isprimes</span>(i) &amp;&amp; <span class="hljs-built_in">isprimes</span>(n / i))&#123;<br>                cout&lt;&lt;<span class="hljs-built_in">max</span>(i, n / i);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>); <br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//cin&gt;&gt;t;</span><br>    <span class="hljs-keyword">while</span> (t--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-comment">//cout&lt;&lt;fixed &lt;&lt;setprecision(12) &lt;&lt; (double)clock() / (double)CLOCKS_PER_SEC &lt;&lt; &quot;\n&quot;;</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="G："><a href="#G：" class="headerlink" title="G："></a>G：</h1><p> 由于数据很小，双重循环判断就行了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> double long double </span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>        cin&gt;&gt;a[i];<br>    &#125;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">1e9</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - m + <span class="hljs-number">1</span>; ++i)&#123;<br>        <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i; j &lt;= i + m - <span class="hljs-number">1</span>; ++j)&#123;<br>            t += a[j];<br>        &#125;<br>        ans = <span class="hljs-built_in">min</span>(ans, t);<br>    &#125;<br>    cout&lt;&lt;ans&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br><br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>); <br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//cin&gt;&gt;t;</span><br>    <span class="hljs-keyword">while</span> (t--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-comment">//cout&lt;&lt;fixed &lt;&lt;setprecision(12) &lt;&lt; (double)clock() / (double)CLOCKS_PER_SEC &lt;&lt; &quot;\n&quot;;</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="H"><a href="#H" class="headerlink" title="H:"></a>H:</h1><p>按照题意模拟，读入整行字符串用getline， 很垃圾一道题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> double long double </span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    string s;<br>    <span class="hljs-built_in">getline</span>(cin, s);<br><br>    <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br>    vector&lt;<span class="hljs-type">int</span>&gt; res;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        string t = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">int</span> j = i;<br><br>        <span class="hljs-comment">// 提取每个单词</span><br>        <span class="hljs-keyword">while</span> (j &lt; n &amp;&amp; s[j] != <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>            t += s[j];<br>            j++;<br>        &#125;<br><br>        <span class="hljs-comment">// 判断单词并转换成相应的数字</span><br>        <span class="hljs-keyword">if</span>(t == <span class="hljs-string">&quot;one&quot;</span> || t == <span class="hljs-string">&quot;a&quot;</span> || t == <span class="hljs-string">&quot;another&quot;</span> || t == <span class="hljs-string">&quot;first&quot;</span>)&#123;<br>            res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t == <span class="hljs-string">&quot;two&quot;</span> || t == <span class="hljs-string">&quot;both&quot;</span> || t == <span class="hljs-string">&quot;second&quot;</span>)&#123;<br>            res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t == <span class="hljs-string">&quot;three&quot;</span> || t == <span class="hljs-string">&quot;third&quot;</span>)&#123;<br>            res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">3</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t == <span class="hljs-string">&quot;four&quot;</span>)&#123;<br>            res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">4</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t == <span class="hljs-string">&quot;five&quot;</span>)&#123;<br>            res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">5</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t == <span class="hljs-string">&quot;six&quot;</span>)&#123;<br>            res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">6</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t == <span class="hljs-string">&quot;seven&quot;</span>)&#123;<br>            res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">7</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t == <span class="hljs-string">&quot;eight&quot;</span>)&#123;<br>            res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">8</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t == <span class="hljs-string">&quot;nine&quot;</span>)&#123;<br>            res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">9</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t == <span class="hljs-string">&quot;ten&quot;</span>)&#123;<br>            res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t == <span class="hljs-string">&quot;eleven&quot;</span>)&#123;<br>            res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">11</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t == <span class="hljs-string">&quot;twelve&quot;</span>)&#123;<br>            res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">12</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t == <span class="hljs-string">&quot;thirteen&quot;</span>)&#123;<br>            res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">13</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t == <span class="hljs-string">&quot;fourteen&quot;</span>)&#123;<br>            res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">14</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t == <span class="hljs-string">&quot;fifteen&quot;</span>)&#123;<br>            res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">15</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t == <span class="hljs-string">&quot;sixteen&quot;</span>)&#123;<br>            res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">16</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t == <span class="hljs-string">&quot;seventeen&quot;</span>)&#123;<br>            res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">17</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t == <span class="hljs-string">&quot;eighteen&quot;</span>)&#123;<br>            res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">18</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t == <span class="hljs-string">&quot;nineteen&quot;</span>)&#123;<br>            res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">19</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t == <span class="hljs-string">&quot;twenty&quot;</span>)&#123;<br>            res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>        &#125;<br>        i = j;  <span class="hljs-comment">// 移动 i 的位置到下一个单词的开头</span><br>    &#125;<br><br>    <span class="hljs-type">int</span> m = res.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i)&#123;<br>        res[i] = res[i] * res[i] % <span class="hljs-number">100</span>;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(res.<span class="hljs-built_in">begin</span>(), res.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">//排序，从小到大</span><br>    string ans = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> t : res)&#123;<br>        <span class="hljs-keyword">if</span>(ans.<span class="hljs-built_in">size</span>() != <span class="hljs-number">0</span> || t / <span class="hljs-number">10</span> != <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//防止出现前导零</span><br>            ans += (<span class="hljs-type">char</span>)(<span class="hljs-string">&#x27;0&#x27;</span> + t / <span class="hljs-number">10</span>);<br>        &#125;<br>        ans += (<span class="hljs-type">char</span>)(<span class="hljs-string">&#x27;0&#x27;</span> + t % <span class="hljs-number">10</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ans.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//特判ans为空</span><br>        cout&lt;&lt;<span class="hljs-number">0</span>&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        cout&lt;&lt;ans&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>); <br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;  <br>    <span class="hljs-comment">//cin&gt;&gt;t;</span><br>    <span class="hljs-keyword">while</span> (t--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces round 962 G题解</title>
    <link href="/2024/10/13/Codeforces%20round%20962G/Codeforces%20round%20962G/"/>
    <url>/2024/10/13/Codeforces%20round%20962G/Codeforces%20round%20962G/</url>
    
    <content type="html"><![CDATA[<p>思路：</p><p>1、首先通过观察，这些点和边构成了一个圆环。对于给出的每对朋友a,b，这两点之间的优弧和劣弧必然需要维护一条。</p><p>2、因为发现，对一个点对进行操作，就是对一个区间进行操作，所以考虑使用线段树来做，对点对间圆弧覆盖的区间进行区间加法，此时0的数量就是可以删除的边数。</p><p>3、用最开始的状态初始化完线段树后，要考虑如何更新从而找到最优答案。假设一开始都是用圆环下边。可以枚举每条边，让他们变成可以删除的，此时要把所有以这个边左端点为起点的所有点对段翻到圆环上边去，再把所有以这个边左端点为终点的点对段放回圆环下边来，这样当前枚举的这条边必定是没有任何覆盖的。并且这样就能使得当前的状态是“满足当前边被删的唯一状态”，(为什么是唯一呢，因为端点在当前边左边能翻上去（终点在右边）的都必须翻上去，否侧会覆盖当前枚举的区间，不能翻上去（终点在左边）的都不能翻上去，否则也会覆盖当前的区间，而右边的线段必然不能翻上去，否则一定会覆盖当前的区间，所以更新完后，此时就是当前枚举的段不被覆盖的唯一解)，最优解必然出现在某条边可以被删除的状态之中，所以枚举完更新答案即可。</p><p>4、线段树维护以i为左端点的边的权值，维护min和min_cnt，求0的数量的时候，先判断min是不是为0，为0的话就是min_cnt，否则为0.</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> double long double</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf = <span class="hljs-number">1e12</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">data</span>&#123;<br>    <span class="hljs-type">int</span> l, r;<br>    <span class="hljs-type">int</span> min, zcnt; <span class="hljs-comment">//区间当前min， 区间中0值的数量</span><br>    <span class="hljs-type">int</span> lz; <span class="hljs-comment">//懒标记</span><br>&#125;seg[<span class="hljs-number">4</span> * N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pull</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span>&#123;<br>    seg[p].min = <span class="hljs-built_in">min</span>(seg[p &lt;&lt; <span class="hljs-number">1</span>].min, seg[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].min);<br>    <span class="hljs-keyword">if</span>(seg[p &lt;&lt; <span class="hljs-number">1</span>].min &lt; seg[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].min)&#123;<br>        seg[p].zcnt = seg[p &lt;&lt; <span class="hljs-number">1</span>].zcnt;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(seg[p &lt;&lt; <span class="hljs-number">1</span>].min &gt; seg[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].min)&#123;<br>        seg[p].zcnt = seg[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].zcnt;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        seg[p].zcnt = seg[p &lt;&lt; <span class="hljs-number">1</span>].zcnt + seg[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].zcnt;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span>&#123;<br>    seg[p] = &#123;l, r, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">if</span>(l == r)&#123;<br>        seg[p].zcnt = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-built_in">pull</span>(p);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(seg[p].lz)&#123;<br>        seg[p &lt;&lt; <span class="hljs-number">1</span>].min += seg[p].lz;<br>        seg[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].min += seg[p].lz;<br>        seg[p &lt;&lt; <span class="hljs-number">1</span>].lz += seg[p].lz;<br>        seg[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].lz += seg[p].lz;<br>        seg[p].lz = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function">PII <span class="hljs-title">rangeQuery</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l &gt; seg[p].r || r &lt; seg[p].l)&#123;<br>        <span class="hljs-keyword">return</span> &#123;inf, <span class="hljs-number">0ll</span>&#125;;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(seg[p].l &gt;= l &amp;&amp; seg[p].r &lt;= r)&#123;<br>        <span class="hljs-keyword">return</span> &#123;seg[p].min, seg[p].zcnt&#125;;<br>    &#125;<br>    <span class="hljs-built_in">push</span>(p);<br>    <span class="hljs-keyword">auto</span> [lmin, lcnt] = <span class="hljs-built_in">rangeQuery</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">auto</span> [rmin, rcnt] = <span class="hljs-built_in">rangeQuery</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">if</span>(lmin &lt; rmin)&#123;<br>        <span class="hljs-keyword">return</span> &#123;lmin, lcnt&#125;;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(lmin &gt; rmin)&#123;<br>        <span class="hljs-keyword">return</span> &#123;rmin, rcnt&#125;;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> &#123;lmin, lcnt + rcnt&#125;;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rangeApply</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x)</span></span>&#123;   <br>    <span class="hljs-keyword">if</span>(l &gt; seg[p].r || r &lt; seg[p].l)&#123;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(seg[p].l &gt;= l &amp;&amp; seg[p].r &lt;= r)&#123;<br>        seg[p].min += x;<br>        seg[p].lz += x;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-built_in">push</span>(p);<br>    <span class="hljs-built_in">rangeApply</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r, x);<br>    <span class="hljs-built_in">rangeApply</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r, x);<br>    <span class="hljs-built_in">pull</span>(p);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rangeQuery</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">auto</span> [min, cnt] = <span class="hljs-built_in">rangeQuery</span>(<span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">if</span>(min &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> (r - l + <span class="hljs-number">1</span>); <br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">return</span> (r - l + <span class="hljs-number">1</span>) - cnt; <br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br><br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>    <span class="hljs-function">vector&lt;PII&gt; <span class="hljs-title">p</span><span class="hljs-params">(m + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)&#123;<br>        <span class="hljs-type">int</span> u, v;<br>        cin&gt;&gt;u&gt;&gt;v;<br>        p[i] = &#123;<span class="hljs-built_in">min</span>(u, v), <span class="hljs-built_in">max</span>(u, v)&#125;;<br>        <span class="hljs-built_in">rangeApply</span>(<span class="hljs-number">1</span>, p[i].first, p[i].second - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<span class="hljs-comment">//一开始假设都在圆的同一边</span><br>    &#125;<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-built_in">rangeQuery</span>(<span class="hljs-number">1</span>, n);<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">start</span>(n + <span class="hljs-number">1</span>), <span class="hljs-built_in">end</span>(n + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)&#123;<span class="hljs-comment">//记录这些在圆的同一边的区间，然后枚举他们将其换到另一边</span><br>        <span class="hljs-keyword">auto</span> [l, r] = p[i];<br>        start[l].<span class="hljs-built_in">push_back</span>(i);<br>        end[r].<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> j : start[i])&#123;<span class="hljs-comment">//这段关系走另外一个弧</span><br>            <span class="hljs-keyword">auto</span> [l, r] = p[j];<br>            <span class="hljs-comment">//cout&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot;\n&quot;;</span><br>            <span class="hljs-built_in">rangeApply</span>(<span class="hljs-number">1</span>, l, r - <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>);<br>            <span class="hljs-built_in">rangeApply</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, l - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>            <span class="hljs-built_in">rangeApply</span>(<span class="hljs-number">1</span>, r, n, <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> j : end[i])&#123;<span class="hljs-comment">//前面换到另一段弧的影响到当前段了，要消除影响。</span><br>            <span class="hljs-keyword">auto</span> [l, r] = p[j];<br>            <span class="hljs-built_in">rangeApply</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, l - <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>);<br>            <span class="hljs-built_in">rangeApply</span>(<span class="hljs-number">1</span>, r, n, - <span class="hljs-number">1</span>);<br>            <span class="hljs-built_in">rangeApply</span>(<span class="hljs-number">1</span>, l, r - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        &#125;<br>        ans = <span class="hljs-built_in">min</span>(ans, <span class="hljs-built_in">rangeQuery</span>(<span class="hljs-number">1</span>, n));<br>    &#125;<br><br>    cout&lt;&lt;ans&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br><br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>); <br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span> (t--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-comment">//cout&lt;&lt;fixed &lt;&lt;setprecision(12) &lt;&lt; (double)clock() / (double)CLOCKS_PER_SEC &lt;&lt; &quot;\n&quot;;</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2024/10/13/Codeforces%20round%20962G/Codeforces%20round%20962G/1.jpg" style="zoom:100%">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>图的连通性</title>
    <link href="/2024/08/04/%E5%9B%BE%E7%9A%84%E8%BF%9E%E9%80%9A%E6%80%A7/%E5%9B%BE%E7%9A%84%E8%BF%9E%E9%80%9A%E6%80%A7/"/>
    <url>/2024/08/04/%E5%9B%BE%E7%9A%84%E8%BF%9E%E9%80%9A%E6%80%A7/%E5%9B%BE%E7%9A%84%E8%BF%9E%E9%80%9A%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="Tarjan算法："><a href="#Tarjan算法：" class="headerlink" title="Tarjan算法："></a>Tarjan算法：</h2><p>dfn[ ]: 该点dfs的时间戳 </p><p>low[ ]: 该点可以通过非当前dfs路径到达的最小的时间戳</p><p>tarjan核心思想：一个父节点u，一个子节点v， 若low[v] &gt;&#x3D; dfn[u]，则说明当前这个父节点对子节点具有绝对的控制，换言之，这个父节点与子节点之间的边要是断了，那么子节点没有其他路径可以到达一个时间戳更小的点去，那么这个连通分量就断开了，所以这条边就是割边，这个父节点（多半）是割点（如果是根节点的话还要判断一下）。</p><p>边双连通分量（EDCC）：一个无向图中，没有割边。一般图中，去掉割边，剩下的就是各个边双。</p><p>点双连通分量（VDCC）：一个无向图中，没有割点。求点双不是直接去掉割点。</p><p>强连通分量（SCC）：一个有向图中，任意点之间相互连通的极大连通分量</p><p>除了求边双可以用去掉割边再求联通分量的，其他过程中涉及到用stack保存dfs的顺序，从而得到各个连通块的方法，求边双也可以用stack。</p><h2 id="1、求割边及边双联通分量（EDCC）："><a href="#1、求割边及边双联通分量（EDCC）：" class="headerlink" title="1、求割边及边双联通分量（EDCC）："></a>1、求割边及边双联通分量（EDCC）：</h2><p>​注意：两个点间可能有多条边，所以要记录各个边。</p><p>​小技巧：从2开始记录边，2+1则是反边， 这样的话对每个边i，它的反边就是(i ^ 1)</p><p>题目：P8436</p><h3 id="解法1："><a href="#解法1：" class="headerlink" title="解法1："></a>解法1：</h3><p>​先求出割边，再去掉割边，再求出连通块</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> double long double</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br><br>    vector&lt;vector&lt;PII&gt;&gt; <span class="hljs-built_in">adj</span>(n + <span class="hljs-number">1</span>);<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">st</span><span class="hljs-params">(<span class="hljs-number">2</span> * m + <span class="hljs-number">10</span>, <span class="hljs-literal">false</span>)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)&#123;<br>        <span class="hljs-type">int</span> u,v;<br>        cin&gt;&gt;u&gt;&gt;v;<br>        adj[u].<span class="hljs-built_in">push_back</span>(&#123;v,i &lt;&lt; <span class="hljs-number">1</span>&#125;);<br>        adj[v].<span class="hljs-built_in">push_back</span>(&#123;u,i &lt;&lt; <span class="hljs-number">1</span> ^ <span class="hljs-number">1</span>&#125;);<br>    &#125;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dfn</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">low</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-type">int</span> tim = <span class="hljs-number">0</span>;<br>    function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)&gt; tarjan = [&amp;](<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> fa)&#123;<br>        dfn[u] = low[u] = ++tim;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> [v, vis] : adj[u])&#123;<br>            <span class="hljs-keyword">if</span>(vis == (fa ^ <span class="hljs-number">1</span>))&#123;<span class="hljs-comment">//不能从来的陆回去</span><br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(!dfn[v])&#123;<br>                <span class="hljs-built_in">tarjan</span>(v,vis);<br>                low[u] = <span class="hljs-built_in">min</span>(low[u], low[v]);<br>                <span class="hljs-keyword">if</span>(low[v] &gt;= dfn[u])&#123; <span class="hljs-comment">//u对v有支配关系</span><br>                    st[(vis)] = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 记录割边</span><br>                    st[(vis ^ <span class="hljs-number">1</span>)] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                low[u] = <span class="hljs-built_in">min</span>(low[u], dfn[v]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>        <span class="hljs-keyword">if</span>(!dfn[i])&#123;<br>            <span class="hljs-built_in">tarjan</span>(i,<span class="hljs-number">-1</span>);<br>        &#125;<br>    &#125;<br><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">EDCC</span>(n + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> u = <span class="hljs-number">1</span>; u &lt;= n; ++u)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> [v, w] : adj[u])&#123;<br>            <span class="hljs-keyword">if</span>(st[w] || st[w ^ <span class="hljs-number">1</span>])&#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                EDCC[u].<span class="hljs-built_in">push_back</span>(v);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">vis</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-literal">false</span>)</span></span>;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">ans</span>(n + <span class="hljs-number">1</span>);<br>    function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>)&gt; dfs = [&amp;](<span class="hljs-type">int</span> u)&#123;<br>        vis[u] = <span class="hljs-literal">true</span>;<br>        ans[cnt].<span class="hljs-built_in">push_back</span>(u);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> v : EDCC[u])&#123;<br>            <span class="hljs-keyword">if</span>(vis[v])&#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-built_in">dfs</span>(v);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;;   <br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>        <span class="hljs-keyword">if</span>(!vis[i])&#123;<br>            cnt ++;<br>            <span class="hljs-built_in">dfs</span>(i);<br>        &#125;<br>    &#125;<br><br>    cout&lt;&lt;cnt&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; ++i)&#123;<br>        cout&lt;&lt;ans[i].<span class="hljs-built_in">size</span>()&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> v : ans[i])&#123;<br>            cout&lt;&lt;v&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br><br><br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//cin &gt;&gt; t;</span><br><br>    <span class="hljs-keyword">while</span> (t--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="解法2："><a href="#解法2：" class="headerlink" title="解法2："></a>解法2：</h3><p>​直接stack模拟，速度快</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> double long double</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br><br>    vector&lt;vector&lt;PII&gt;&gt; <span class="hljs-built_in">adj</span>(n + <span class="hljs-number">1</span>);<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">st</span><span class="hljs-params">(<span class="hljs-number">2</span> * m + <span class="hljs-number">10</span>, <span class="hljs-literal">false</span>)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)&#123;<br>        <span class="hljs-type">int</span> u,v;<br>        cin&gt;&gt;u&gt;&gt;v;<br>        adj[u].<span class="hljs-built_in">push_back</span>(&#123;v,i &lt;&lt; <span class="hljs-number">1</span>&#125;);<br>        adj[v].<span class="hljs-built_in">push_back</span>(&#123;u,i &lt;&lt; <span class="hljs-number">1</span> ^ <span class="hljs-number">1</span>&#125;);<br>    &#125;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dfn</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">low</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-type">int</span> tim = <span class="hljs-number">0</span>;<br>    stack&lt;<span class="hljs-type">int</span>&gt; stk;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">ans</span>(n + <span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)&gt; tarjan = [&amp;](<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> fa)&#123;<br>        dfn[u] = low[u] = ++tim;<br>        stk.<span class="hljs-built_in">push</span>(u);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> [v, vis] : adj[u])&#123;<br>            <span class="hljs-keyword">if</span>(vis == (fa ^ <span class="hljs-number">1</span>))&#123;<span class="hljs-comment">//不能从来的陆回去</span><br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(!dfn[v])&#123;<br>                <span class="hljs-built_in">tarjan</span>(v,vis);<br>                low[u] = <span class="hljs-built_in">min</span>(low[u], low[v]);<br>                <span class="hljs-keyword">if</span>(low[v] &gt;= dfn[u])&#123; <span class="hljs-comment">//u对v有支配关系</span><br>                    st[(vis)] = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 记录割边</span><br>                    st[(vis ^ <span class="hljs-number">1</span>)] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                low[u] = <span class="hljs-built_in">min</span>(low[u], dfn[v]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(low[u] == dfn[u])&#123; <span class="hljs-comment">//此时求得了极大的联通分量。</span><br>            <span class="hljs-type">int</span> v;<br>            cnt ++;<br>            <span class="hljs-keyword">do</span>&#123;<br>                v = stk.<span class="hljs-built_in">top</span>();<br>                stk.<span class="hljs-built_in">pop</span>();<br>                ans[cnt].<span class="hljs-built_in">push_back</span>(v);<br>            &#125;<span class="hljs-keyword">while</span>(v != u);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>        <span class="hljs-keyword">if</span>(!dfn[i])&#123;<br>            <span class="hljs-built_in">tarjan</span>(i,<span class="hljs-number">-1</span>);<br>        &#125;<br>    &#125;<br><br>    cout&lt;&lt;cnt&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; ++i)&#123;<br>        cout&lt;&lt;ans[i].<span class="hljs-built_in">size</span>()&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> v : ans[i])&#123;<br>            cout&lt;&lt;v&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//cin &gt;&gt; t;</span><br><br>    <span class="hljs-keyword">while</span> (t--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、求割点及点双连通分量（VDCC）："><a href="#2、求割点及点双连通分量（VDCC）：" class="headerlink" title="2、求割点及点双连通分量（VDCC）："></a>2、求割点及点双连通分量（VDCC）：</h2><h3 id="1、求割点"><a href="#1、求割点" class="headerlink" title="1、求割点"></a>1、求割点</h3><p>​如果一个点不是根节点，且有可以支配的子节点，那么他就是一个割点；如果这个点是根节点，那么需要两个可支配的子节点。</p><p>题目：P3388</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> double long double</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">adj</span>(n + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)&#123;<br>        <span class="hljs-type">int</span> u,v;<br>        cin&gt;&gt;u&gt;&gt;v;<br>        adj[u].<span class="hljs-built_in">push_back</span>(v);<br>        adj[v].<span class="hljs-built_in">push_back</span>(u);<br>    &#125;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dfn</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">low</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">cut</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-literal">false</span>)</span></span>;<br>    <span class="hljs-type">int</span> tim = <span class="hljs-number">0</span>;<br><br>    function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)&gt; tarjan = [&amp;](<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> fa)&#123;<br>        dfn[u] = low[u] = ++tim;<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> v : adj[u])&#123;<br>            <span class="hljs-keyword">if</span>(!dfn[v])&#123;<br>                <span class="hljs-built_in">tarjan</span>(v,u);<br>                low[u] = <span class="hljs-built_in">min</span>(low[u], low[v]);<br>                <span class="hljs-keyword">if</span>(low[v] &gt;= dfn[u])&#123;<br>                    cnt ++;<br>                    <span class="hljs-keyword">if</span>(fa != <span class="hljs-number">-1</span> || cnt &gt;= <span class="hljs-number">2</span>)&#123;<br>                        cut[u] = <span class="hljs-literal">true</span>;<br>                    &#125;<br>                &#125;<br>                <br>            &#125; <br>            <span class="hljs-keyword">else</span>&#123;<br>                low[u] = <span class="hljs-built_in">min</span>(low[u], dfn[v]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>        <span class="hljs-keyword">if</span>(!dfn[i])&#123;<br>            <span class="hljs-built_in">tarjan</span>(i,<span class="hljs-number">-1</span>);<br>        &#125;<br>    &#125;<br><br>    vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>        <span class="hljs-keyword">if</span>(cut[i])&#123;<br>            ans.<span class="hljs-built_in">push_back</span>(i);<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ans.<span class="hljs-built_in">size</span>()&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it : ans)&#123;<br>        cout&lt;&lt;it&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br><br>    <span class="hljs-keyword">return</span> ;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//cin &gt;&gt; t;</span><br><br>    <span class="hljs-keyword">while</span> (t--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、求点双连通分量："><a href="#2、求点双连通分量：" class="headerlink" title="2、求点双连通分量："></a>2、求点双连通分量：</h3><p>​每找到一个割点，就在就把栈中到这个割点的孩子的所有点添加进点双，并加入割点。（注意此时不能把割点从栈中删去，因为割点可能在多个点双中。）</p><p>​注意：求解的时候记得把自环去掉，否则对于一些孤立的点来说，他们就无法被添加进点双中。</p><p>题目：P8435</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> double long double</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">adj</span>(n + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)&#123;<br>        <span class="hljs-type">int</span> u,v;<br>        cin&gt;&gt;u&gt;&gt;v;<br>        <span class="hljs-keyword">if</span>(u == v)&#123;<span class="hljs-comment">//去掉自环</span><br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        adj[u].<span class="hljs-built_in">push_back</span>(v);<br>        adj[v].<span class="hljs-built_in">push_back</span>(u);<br>    &#125;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dfn</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">low</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">cut</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-literal">false</span>)</span></span>;<br>    stack&lt;<span class="hljs-type">int</span>&gt; stk;<br>    <span class="hljs-type">int</span> tim = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">ans</span>(n + <span class="hljs-number">1</span>);<br>    function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)&gt; tarjan = [&amp;](<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> fa)&#123;<br>        dfn[u] = low[u] = ++tim;<br>        stk.<span class="hljs-built_in">push</span>(u);<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(adj[u].<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//孤立的点特判一下</span><br>            sum ++;<br>            ans[sum].<span class="hljs-built_in">push_back</span>(u);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> v : adj[u])&#123;<br>            <span class="hljs-keyword">if</span>(!dfn[v])&#123;<br>                <span class="hljs-built_in">tarjan</span>(v,u);<br>                low[u] = <span class="hljs-built_in">min</span>(low[u], low[v]);<br>                <span class="hljs-keyword">if</span>(low[v] &gt;= dfn[u])&#123;<br>                    cnt ++;<br>                    <span class="hljs-keyword">if</span>(u != <span class="hljs-number">-1</span> || cnt &gt;= <span class="hljs-number">2</span>)&#123;<br>                        <span class="hljs-type">int</span> to = <span class="hljs-number">0</span>;<br>                        sum ++;<br>                        <span class="hljs-keyword">do</span>&#123;<br>                            to = stk.<span class="hljs-built_in">top</span>();<br>                            stk.<span class="hljs-built_in">pop</span>();<br>                            ans[sum].<span class="hljs-built_in">push_back</span>(to);<br>                        &#125;<span class="hljs-keyword">while</span>(to != v);<br>                        ans[sum].<span class="hljs-built_in">push_back</span>(u);<br>                        cut[u] = <span class="hljs-literal">true</span>;<br>                    &#125;<br>                &#125;<br>            &#125; <br>            <span class="hljs-keyword">else</span>&#123;<br>                low[u] = <span class="hljs-built_in">min</span>(low[u], dfn[v]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>        <span class="hljs-keyword">if</span>(!dfn[i])&#123;<br>            <span class="hljs-built_in">tarjan</span>(i,<span class="hljs-number">-1</span>);<br>        &#125;<br>    &#125;<br><br>    cout&lt;&lt;sum&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= sum; ++i)&#123;<br>        cout&lt;&lt;ans[i].<span class="hljs-built_in">size</span>()&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it : ans[i])&#123;<br>            cout&lt;&lt;it&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//cin &gt;&gt; t;</span><br><br>    <span class="hljs-keyword">while</span> (t--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、求强连通分量（SCC）："><a href="#3、求强连通分量（SCC）：" class="headerlink" title="3、求强连通分量（SCC）："></a>3、求强连通分量（SCC）：</h2><p>​1、每访问到一个点x，将他压入栈中，遍历所有邻接点y。</p><p>​2、如果邻接点y已经在栈中了，说明邻接点的dfn[]更小，更新low[x] &#x3D; min(low[x], dfn[y]);</p><p>​3、如果没在栈中，就递归访问y，返回时更新low[x] &#x3D; min(low[x], low[y]);</p><p>​4、当前节点遍历完，如果dfn[x] &#x3D;&#x3D; low[x]，则说明当前点是一个强连通分量的起点，此时一直弹栈，直到弹出当前点x，这些点构成一个强连通分量。</p><p>​每一个dfn等于low的点，后面的点都是有其他方式可以访问到更早点的，但是当前点没法访问到更早的点，所以它可以作为一个强连通分量的起点。</p><p>​5、入栈或出栈用一个st数组记录。</p><p>题目 ：P3387 </p><p>代码中的SCC即是缩点之后的新图。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> double long double</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">adj</span>(n + <span class="hljs-number">1</span>);<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>        cin&gt;&gt;a[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)&#123;<br>        <span class="hljs-type">int</span> u,v;<br>        cin&gt;&gt;u&gt;&gt;v;<br>        adj[u].<span class="hljs-built_in">push_back</span>(v);<br>    &#125;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dfn</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">low</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">st</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-literal">false</span>)</span></span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">bel</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>)</span></span>;<br>    stack&lt;<span class="hljs-type">int</span>&gt; stk;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> tim = <span class="hljs-number">0</span>;<br>    function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>)&gt; tarjan = [&amp;](<span class="hljs-type">int</span> u)&#123;<br>        dfn[u] = low[u] = ++tim;<br>        st[u] = <span class="hljs-literal">true</span>;<br>        stk.<span class="hljs-built_in">push</span>(u);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> v : adj[u])&#123;<br>            <span class="hljs-keyword">if</span>(!dfn[v])&#123;<br>                <span class="hljs-built_in">tarjan</span>(v);<br>                low[u] = <span class="hljs-built_in">min</span>(low[u], low[v]);<br>            &#125; <br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(st[v])&#123;<br>                low[u] = <span class="hljs-built_in">min</span>(low[u], dfn[v]);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(low[u] == dfn[u])&#123;<br>            <span class="hljs-type">int</span> v;<br>            cnt ++;<br>            <span class="hljs-keyword">do</span>&#123;<br>                v = stk.<span class="hljs-built_in">top</span>();<br>                stk.<span class="hljs-built_in">pop</span>();<br>                bel[v] = cnt;<br>                st[v] = <span class="hljs-literal">false</span>;<br>            &#125;<span class="hljs-keyword">while</span>(u != v);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ;<br>    &#125;;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>        <span class="hljs-keyword">if</span>(!dfn[i])&#123;<br>            <span class="hljs-built_in">tarjan</span>(i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">b</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br>        <span class="hljs-type">int</span> x = bel[i];<br>        b[x] += a[i];<br>    &#125;<br><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">SCC</span>(n + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> u = <span class="hljs-number">1</span>; u &lt;= n; ++u)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> v : adj[u])&#123;<br>            <span class="hljs-keyword">if</span>(bel[u] == bel[v])&#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-type">int</span> x = bel[u];<br>                <span class="hljs-type">int</span> y = bel[v];<br>                SCC[x].<span class="hljs-built_in">push_back</span>(y);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; ++i)&#123;<br>        SCC[<span class="hljs-number">0</span>].<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">vis</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-literal">false</span>)</span></span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dis</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sum</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span></span>;<br>    queue&lt;<span class="hljs-type">int</span>&gt; qu;<br>    vis[<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span>;<br>    dis[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    qu.<span class="hljs-built_in">push</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">bool</span> f = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">while</span>(!qu.<span class="hljs-built_in">empty</span>() &amp;&amp; f)&#123;<br>        <span class="hljs-keyword">auto</span> x = qu.<span class="hljs-built_in">front</span>();<br>        qu.<span class="hljs-built_in">pop</span>();<br>        vis[x] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> y : SCC[x])&#123;<br>            <span class="hljs-keyword">if</span>(dis[y] &gt; dis[x] + (-b[y]))&#123;<br>                dis[y] = dis[x] - b[y];<br>                <span class="hljs-keyword">if</span>(!vis[y])&#123;<br>                    <span class="hljs-keyword">if</span>(++sum[y] &gt;= n)&#123;<br>                        f = <span class="hljs-literal">false</span>;<br>                    &#125;<br>                    vis[y] = <span class="hljs-literal">true</span>;<br>                    qu.<span class="hljs-built_in">push</span>(y);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; ++i)&#123;<br>        ans = <span class="hljs-built_in">min</span>(ans, dis[i]);<br>    &#125;<br><br>    ans = -ans;<br>    cout&lt;&lt;ans&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br><br>    <span class="hljs-keyword">return</span> ;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//cin &gt;&gt; t;</span><br><br>    <span class="hljs-keyword">while</span> (t--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/08/04/%E5%9B%BE%E7%9A%84%E8%BF%9E%E9%80%9A%E6%80%A7/%E5%9B%BE%E7%9A%84%E8%BF%9E%E9%80%9A%E6%80%A7/2.jpg" title="fufu">.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/08/04/hello-world/"/>
    <url>/2024/08/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>first-test</title>
    <link href="/2024/07/31/first-test/"/>
    <url>/2024/07/31/first-test/</url>
    
    <content type="html"><![CDATA[<p>这是一个测试</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
